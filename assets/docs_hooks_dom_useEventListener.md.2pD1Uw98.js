import{_ as t,c as o,o as s,ag as i}from"./chunks/framework.BmLMQRXF.js";const r=JSON.parse('{"title":"useEventListener()","description":"","frontmatter":{},"headers":[],"relativePath":"docs/hooks/dom/useEventListener.md","filePath":"docs/hooks/dom/useEventListener.md"}'),a={name:"docs/hooks/dom/useEventListener.md"};function n(d,e,c,l,h,p){return s(),o("div",null,e[0]||(e[0]=[i(`<h1 id="useeventlistener" tabindex="-1">useEventListener() <a class="header-anchor" href="#useeventlistener" aria-label="Permalink to &quot;useEventListener()&quot;">​</a></h1><blockquote><p><strong>useEventListener</strong>&lt;<code>KW</code>, <code>KH</code>, <code>KM</code>, <code>T</code>&gt;(<code>eventName</code>, <code>handler</code>, <code>element?</code>, <code>options?</code>, <code>debounce?</code>): <code>void</code></p></blockquote><p>Defined in: <a href="https://github.com/ZL-Asica/React/blob/8d3cb0dac8adfb5efa1cab2247ce721be08ac793/src/hooks/dom/useEventListener.ts#L59" target="_blank" rel="noreferrer">src/hooks/dom/useEventListener.ts:59</a></p><p>A custom React hook for attaching an event listener to a target element with automatic cleanup. This hook is useful for adding event listeners to DOM elements or the window object. It also supports optional debouncing to limit how often the handler is invoked.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="kw" tabindex="-1">KW <a class="header-anchor" href="#kw" aria-label="Permalink to &quot;KW&quot;">​</a></h3><p><code>KW</code> <em>extends</em> keyof <code>WindowEventMap</code></p><h3 id="kh" tabindex="-1">KH <a class="header-anchor" href="#kh" aria-label="Permalink to &quot;KH&quot;">​</a></h3><p><code>KH</code> <em>extends</em> <code>&quot;error&quot;</code> | <code>&quot;toggle&quot;</code> | <code>&quot;abort&quot;</code> | <code>&quot;animationcancel&quot;</code> | <code>&quot;animationend&quot;</code> | <code>&quot;animationiteration&quot;</code> | <code>&quot;animationstart&quot;</code> | <code>&quot;auxclick&quot;</code> | <code>&quot;beforeinput&quot;</code> | <code>&quot;beforetoggle&quot;</code> | <code>&quot;blur&quot;</code> | <code>&quot;cancel&quot;</code> | <code>&quot;canplay&quot;</code> | <code>&quot;canplaythrough&quot;</code> | <code>&quot;change&quot;</code> | <code>&quot;click&quot;</code> | <code>&quot;close&quot;</code> | <code>&quot;compositionend&quot;</code> | <code>&quot;compositionstart&quot;</code> | <code>&quot;compositionupdate&quot;</code> | <code>&quot;contextlost&quot;</code> | <code>&quot;contextmenu&quot;</code> | <code>&quot;contextrestored&quot;</code> | <code>&quot;copy&quot;</code> | <code>&quot;cuechange&quot;</code> | <code>&quot;cut&quot;</code> | <code>&quot;dblclick&quot;</code> | <code>&quot;drag&quot;</code> | <code>&quot;dragend&quot;</code> | <code>&quot;dragenter&quot;</code> | <code>&quot;dragleave&quot;</code> | <code>&quot;dragover&quot;</code> | <code>&quot;dragstart&quot;</code> | <code>&quot;drop&quot;</code> | <code>&quot;durationchange&quot;</code> | <code>&quot;emptied&quot;</code> | <code>&quot;ended&quot;</code> | <code>&quot;focus&quot;</code> | <code>&quot;focusin&quot;</code> | <code>&quot;focusout&quot;</code> | <code>&quot;formdata&quot;</code> | <code>&quot;gotpointercapture&quot;</code> | <code>&quot;input&quot;</code> | <code>&quot;invalid&quot;</code> | <code>&quot;keydown&quot;</code> | <code>&quot;keypress&quot;</code> | <code>&quot;keyup&quot;</code> | <code>&quot;load&quot;</code> | <code>&quot;loadeddata&quot;</code> | <code>&quot;loadedmetadata&quot;</code> | <code>&quot;loadstart&quot;</code> | <code>&quot;lostpointercapture&quot;</code> | <code>&quot;mousedown&quot;</code> | <code>&quot;mouseenter&quot;</code> | <code>&quot;mouseleave&quot;</code> | <code>&quot;mousemove&quot;</code> | <code>&quot;mouseout&quot;</code> | <code>&quot;mouseover&quot;</code> | <code>&quot;mouseup&quot;</code> | <code>&quot;paste&quot;</code> | <code>&quot;pause&quot;</code> | <code>&quot;play&quot;</code> | <code>&quot;playing&quot;</code> | <code>&quot;pointercancel&quot;</code> | <code>&quot;pointerdown&quot;</code> | <code>&quot;pointerenter&quot;</code> | <code>&quot;pointerleave&quot;</code> | <code>&quot;pointermove&quot;</code> | <code>&quot;pointerout&quot;</code> | <code>&quot;pointerover&quot;</code> | <code>&quot;pointerup&quot;</code> | <code>&quot;progress&quot;</code> | <code>&quot;ratechange&quot;</code> | <code>&quot;reset&quot;</code> | <code>&quot;resize&quot;</code> | <code>&quot;scroll&quot;</code> | <code>&quot;scrollend&quot;</code> | <code>&quot;securitypolicyviolation&quot;</code> | <code>&quot;seeked&quot;</code> | <code>&quot;seeking&quot;</code> | <code>&quot;select&quot;</code> | <code>&quot;selectionchange&quot;</code> | <code>&quot;selectstart&quot;</code> | <code>&quot;slotchange&quot;</code> | <code>&quot;stalled&quot;</code> | <code>&quot;submit&quot;</code> | <code>&quot;suspend&quot;</code> | <code>&quot;timeupdate&quot;</code> | <code>&quot;touchcancel&quot;</code> | <code>&quot;touchend&quot;</code> | <code>&quot;touchmove&quot;</code> | <code>&quot;touchstart&quot;</code> | <code>&quot;transitioncancel&quot;</code> | <code>&quot;transitionend&quot;</code> | <code>&quot;transitionrun&quot;</code> | <code>&quot;transitionstart&quot;</code> | <code>&quot;volumechange&quot;</code> | <code>&quot;waiting&quot;</code> | <code>&quot;webkitanimationend&quot;</code> | <code>&quot;webkitanimationiteration&quot;</code> | <code>&quot;webkitanimationstart&quot;</code> | <code>&quot;webkittransitionend&quot;</code> | <code>&quot;wheel&quot;</code> | <code>&quot;fullscreenchange&quot;</code> | <code>&quot;fullscreenerror&quot;</code></p><h3 id="km" tabindex="-1">KM <a class="header-anchor" href="#km" aria-label="Permalink to &quot;KM&quot;">​</a></h3><p><code>KM</code> <em>extends</em> <code>&quot;change&quot;</code></p><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code> <em>extends</em> <em>typeof</em> <code>globalThis</code> | <code>Document</code> | <code>HTMLElement</code> | <code>MediaQueryList</code> | <code>SVGElement</code> = <code>HTMLElement</code></p><p>The type of the event object.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="eventname" tabindex="-1">eventName <a class="header-anchor" href="#eventname" aria-label="Permalink to &quot;eventName&quot;">​</a></h3><p>The name of the event to listen for (e.g., &#39;click&#39;, &#39;keydown&#39;).</p><p><code>KW</code> | <code>KH</code> | <code>KM</code></p><h3 id="handler" tabindex="-1">handler <a class="header-anchor" href="#handler" aria-label="Permalink to &quot;handler&quot;">​</a></h3><p>(<code>event</code>) =&gt; <code>void</code></p><p>The callback function to handle the event. Receives the event object as a parameter.</p><h3 id="element" tabindex="-1">element? <a class="header-anchor" href="#element" aria-label="Permalink to &quot;element?&quot;">​</a></h3><p><code>RefObject</code>&lt;<code>T</code>&gt;</p><p>The target element to attach the event listener to. Defaults to <code>globalThis</code> if not provided.</p><h3 id="options" tabindex="-1">options? <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options?&quot;">​</a></h3><p>Additional options to pass to <code>addEventListener</code>. Such as <code>capture</code> or <code>once</code>, etc.</p><p><code>boolean</code> | <code>AddEventListenerOptions</code></p><h3 id="debounce" tabindex="-1">debounce? <a class="header-anchor" href="#debounce" aria-label="Permalink to &quot;debounce?&quot;">​</a></h3><p><code>number</code></p><p>The debounce delay in milliseconds. Defaults to 0ms (no debounce).</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>void</code></p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><p>Example 1: Attach a window event listener with debounce</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;resize&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Window resized!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Example 2: Attach a button click listener</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buttonRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HTMLButtonElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Button clicked!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, buttonRef);</span></span></code></pre></div><p>Example 3: Attach a document event listener</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> documentRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(document);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keydown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Key pressed:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, documentRef, { capture: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p>Example 4: Attach a media query change listener</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mediaQueryListRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchMedia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;(max-width: 600px)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;change&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Media query matches:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.matches);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mediaQueryListRef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,41)]))}const k=t(a,[["render",n]]);export{r as __pageData,k as default};
