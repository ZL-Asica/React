import{_ as a,c as t,a2 as s,o as r}from"./chunks/framework.BQmytedh.js";const p=JSON.parse('{"title":"useAdaptiveEffect()","description":"","frontmatter":{},"headers":[],"relativePath":"docs/hooks/dom/useAdaptiveEffect.md","filePath":"docs/hooks/dom/useAdaptiveEffect.md"}'),i={name:"docs/hooks/dom/useAdaptiveEffect.md"};function o(n,e,c,d,h,l){return r(),t("div",null,e[0]||(e[0]=[s(`<h1 id="useadaptiveeffect" tabindex="-1">useAdaptiveEffect() <a class="header-anchor" href="#useadaptiveeffect" aria-label="Permalink to &quot;useAdaptiveEffect()&quot;">​</a></h1><blockquote><p><strong>useAdaptiveEffect</strong>(<code>effect</code>, <code>deps</code>?): <code>void</code></p></blockquote><p>A hook that adapts to the environment: uses <code>useLayoutEffect</code> on the client side and <code>useEffect</code> on the server side. This ensures compatibility with both SSR and CSR environments.</p><p>Inspired by the implementation from usehooks-ts.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="effect" tabindex="-1">effect <a class="header-anchor" href="#effect" aria-label="Permalink to &quot;effect&quot;">​</a></h3><p><code>EffectCallback</code></p><p>Imperative function that can return a cleanup function</p><h3 id="deps" tabindex="-1">deps? <a class="header-anchor" href="#deps" aria-label="Permalink to &quot;deps?&quot;">​</a></h3><p><code>DependencyList</code></p><p>If present, effect will only activate if the values in the list change.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>void</code></p><h2 id="see" tabindex="-1">See <a class="header-anchor" href="#see" aria-label="Permalink to &quot;See&quot;">​</a></h2><ul><li><a href="https://github.com/juliencrn/usehooks-ts" target="_blank" rel="noreferrer">https://github.com/juliencrn/usehooks-ts</a> Original implementation</li><li><a href="https://react.dev/reference/react/useEffect" target="_blank" rel="noreferrer">https://react.dev/reference/react/useEffect</a> React useEffect documentation</li><li><a href="https://react.dev/reference/react/useLayoutEffect" target="_blank" rel="noreferrer">https://react.dev/reference/react/useLayoutEffect</a> React useLayoutEffect documentation</li></ul><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>Just like <code>useEffect</code>, but it chooses the right hook depending on the environment.</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useAdaptiveEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Your effect code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, [dependencies]);</span></span></code></pre></div><h2 id="version" tabindex="-1">Version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;Version&quot;">​</a></h2><p>16.8.0</p><h2 id="see-1" tabindex="-1">See <a class="header-anchor" href="#see-1" aria-label="Permalink to &quot;See&quot;">​</a></h2><p><a href="https://react.dev/reference/react/useEffect" target="_blank" rel="noreferrer">https://react.dev/reference/react/useEffect</a></p><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/ZL-Asica/React/blob/431add57a8cd5ffa86565b451f7d8d71f191a426/src/hooks/dom/useAdaptiveEffect.ts#L24" target="_blank" rel="noreferrer">src/hooks/dom/useAdaptiveEffect.ts:24</a></p>`,24)]))}const u=a(i,[["render",o]]);export{p as __pageData,u as default};
