import{_ as e,c as t,o as i,ag as s}from"./chunks/framework.CkHWihve.js";const m=JSON.parse('{"title":"randomInt()","description":"","frontmatter":{},"headers":[],"relativePath":"docs/utils/randomInt.md","filePath":"docs/utils/randomInt.md"}'),n={name:"docs/utils/randomInt.md"};function r(o,a,d,l,h,c){return i(),t("div",null,a[0]||(a[0]=[s('<h1 id="randomint" tabindex="-1">randomInt() <a class="header-anchor" href="#randomint" aria-label="Permalink to &quot;randomInt()&quot;">​</a></h1><blockquote><p><strong>randomInt</strong>(<code>min</code>, <code>max</code>): <code>number</code></p></blockquote><p>Defined in: <a href="https://github.com/ZL-Asica/React/blob/c677df2e2d1600a4402f43274851e62eee9eb9e5/src/utils/mathUtils.ts#L13" target="_blank" rel="noreferrer">src/utils/mathUtils.ts:13</a></p><p>Generates a random integer between <code>min</code> and <code>max</code> (inclusive).</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="min" tabindex="-1">min <a class="header-anchor" href="#min" aria-label="Permalink to &quot;min&quot;">​</a></h3><p><code>number</code></p><p>The minimum value (inclusive).</p><h3 id="max" tabindex="-1">max <a class="header-anchor" href="#max" aria-label="Permalink to &quot;max&quot;">​</a></h3><p><code>number</code></p><p>The maximum value (inclusive).</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>number</code></p><p>A random integer between <code>min</code> and <code>max</code>. Returns <code>NaN</code> if inputs are invalid.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> random</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// e.g., 7</span></span></code></pre></div>',16)]))}const u=e(n,[["render",r]]);export{m as __pageData,u as default};
