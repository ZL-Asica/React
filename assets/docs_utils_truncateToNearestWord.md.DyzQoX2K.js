import{_ as a,c as e,o as s,ag as i}from"./chunks/framework.CkHWihve.js";const u=JSON.parse('{"title":"truncateToNearestWord()","description":"","frontmatter":{},"headers":[],"relativePath":"docs/utils/truncateToNearestWord.md","filePath":"docs/utils/truncateToNearestWord.md"}'),n={name:"docs/utils/truncateToNearestWord.md"};function r(h,t,l,o,p,d){return s(),e("div",null,t[0]||(t[0]=[i(`<h1 id="truncatetonearestword" tabindex="-1">truncateToNearestWord() <a class="header-anchor" href="#truncatetonearestword" aria-label="Permalink to &quot;truncateToNearestWord()&quot;">​</a></h1><blockquote><p><strong>truncateToNearestWord</strong>(<code>input</code>, <code>maxLength</code>): <code>string</code></p></blockquote><p>Defined in: <a href="https://github.com/ZL-Asica/React/blob/e18738cc49ff40aa2d8b2a9bb55ae47821286223/src/utils/stringUtils.ts#L227" target="_blank" rel="noreferrer">src/utils/stringUtils.ts:227</a></p><p>truncateToNearestWord</p><p>Truncate a string to the nearest whole word within a given length limit. If the string exceeds the max length, it appends &#39;...&#39; at the end. If no space is found within the truncated string, and the string is longer than the max length, it will truncate the string at the max length and append &#39;...&#39;.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="input" tabindex="-1">input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input&quot;">​</a></h3><p><code>string</code></p><p>The raw input string to be truncated.</p><h3 id="maxlength" tabindex="-1">maxLength <a class="header-anchor" href="#maxlength" aria-label="Permalink to &quot;maxLength&quot;">​</a></h3><p><code>number</code></p><p>The maximum length of the truncated string (including ellipsis if applied).</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>string</code></p><ul><li>The truncated string that does not break words, with an optional ellipsis.</li></ul><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">truncateToNearestWord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a very long sentence that needs truncation.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns: &quot;This is a very...&quot;</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">truncateToNearestWord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Short sentence.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns: &quot;Short sentence.&quot; (no truncation applied)</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">truncateToNearestWord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Exact length match!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns: &quot;Exact length match!&quot;</span></span></code></pre></div>`,19)]))}const k=a(n,[["render",r]]);export{u as __pageData,k as default};
