import{_ as s,c as a,o as t,ag as i}from"./chunks/framework.BmLMQRXF.js";const k=JSON.parse('{"title":"mergeObjects()","description":"","frontmatter":{},"headers":[],"relativePath":"docs/utils/mergeObjects.md","filePath":"docs/utils/mergeObjects.md"}'),o={name:"docs/utils/mergeObjects.md"};function n(r,e,l,h,c,d){return t(),a("div",null,e[0]||(e[0]=[i(`<h1 id="mergeobjects" tabindex="-1">mergeObjects() <a class="header-anchor" href="#mergeobjects" aria-label="Permalink to &quot;mergeObjects()&quot;">​</a></h1><blockquote><p><strong>mergeObjects</strong>&lt;<code>T</code>, <code>U</code>&gt;(<code>object1</code>, <code>object2</code>): <code>T</code> &amp; <code>U</code></p></blockquote><p>Defined in: <a href="https://github.com/ZL-Asica/React/blob/3cb0835442f8a8b8d9ff74785a1f48e3a67e8261/src/utils/objectUtils.ts#L53" target="_blank" rel="noreferrer">src/utils/objectUtils.ts:53</a></p><p>Deeply merges two objects into a single object.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>T</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p><p>• <strong>U</strong> <em>extends</em> <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="object1" tabindex="-1">object1 <a class="header-anchor" href="#object1" aria-label="Permalink to &quot;object1&quot;">​</a></h3><p><code>T</code></p><p>The first object.</p><h3 id="object2" tabindex="-1">object2 <a class="header-anchor" href="#object2" aria-label="Permalink to &quot;object2&quot;">​</a></h3><p><code>U</code></p><p>The second object.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>T</code> &amp; <code>U</code></p><p>A new object that is the result of deeply merging <code>object1</code> and <code>object2</code>.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { b: { d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, e: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> merged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mergeObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1, obj2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(merged); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { a: 1, b: { c: 2, d: 3 }, e: 4 }</span></span></code></pre></div>`,19)]))}const b=s(o,[["render",n]]);export{k as __pageData,b as default};
