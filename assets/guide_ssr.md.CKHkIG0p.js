import{_ as t,c as s,o as a,ag as i}from"./chunks/framework.BmLMQRXF.js";const u=JSON.parse('{"title":"SSR","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ssr.md","filePath":"guide/ssr.md"}'),o={name:"guide/ssr.md"};function r(n,e,l,d,c,h){return a(),s("div",null,e[0]||(e[0]=[i(`<h1 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;SSR&quot;">‚Äã</a></h1><h2 id="what-is-ssr" tabindex="-1">What is SSR? <a class="header-anchor" href="#what-is-ssr" aria-label="Permalink to &quot;What is SSR?&quot;">‚Äã</a></h2><p><strong>Server-Side Rendering (SSR)</strong> refers to the technique of rendering React components on the server before sending the fully rendered HTML to the client. This is commonly used in frameworks like <strong>Next.js</strong>, <strong>React Router (Remix)</strong>, or <strong>Tanstack Start</strong>, where SEO, performance, or fast initial page loads are critical.</p><p>SSR differs from traditional <strong>Client-Side Rendering (CSR)</strong>, where rendering happens entirely in the browser after JavaScript is downloaded and executed.</p><h2 id="do-you-need-to-worry-about-ssr" tabindex="-1">Do You Need to Worry About SSR? <a class="header-anchor" href="#do-you-need-to-worry-about-ssr" aria-label="Permalink to &quot;Do You Need to Worry About SSR?&quot;">‚Äã</a></h2><p>Most users <strong>do not need to worry about SSR</strong>. If you‚Äôre:</p><ul><li>Using <strong>Create React App</strong>, <strong>Vite</strong>, or any other client-only (SPA) React environment</li><li>Building frontend UI without server-side rendering or hydration concerns</li></ul><p>‚û°Ô∏è You can safely use <code>@zl-asica/react</code> and <code>@zl-asica/react/hooks</code> without any restrictions.</p><p>However, if you are:</p><ul><li>Building with <strong>Next.js</strong>, <strong>React Router (Remix)</strong>, or <strong>Tanstack Start</strong></li><li>Rendering React components <strong>on the server</strong></li><li>Running React in an <strong>edge</strong> or <strong>Node.js server</strong> context</li></ul><p>‚û°Ô∏è You may need <strong>SSR-safe utilities</strong>, since some browser-specific features (like <code>window</code>, <code>document</code>, or hooks tied to the DOM lifecycle) are not available during server rendering.</p><h2 id="ssr-compatibility-in-zl-asica-react" tabindex="-1">SSR Compatibility in <code>@zl-asica/react</code> <a class="header-anchor" href="#ssr-compatibility-in-zl-asica-react" aria-label="Permalink to &quot;SSR Compatibility in \`@zl-asica/react\`&quot;">‚Äã</a></h2><p>We offer a dedicated set of <strong>SSR-compatible utilities</strong> to ensure safe use in environments without a DOM.</p><p>üì¶ Import them like this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ‚úÖ Safe for SSR</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { assignUUID } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@zl-asica/react/utils&#39;</span></span></code></pre></div><p>These utilities are designed to avoid any references to browser-only globals like <code>window</code>, <code>document</code>, or React lifecycle hooks that require the DOM.</p><h2 id="what-about-client-side" tabindex="-1">What About Client-Side? <a class="header-anchor" href="#what-about-client-side" aria-label="Permalink to &quot;What About Client-Side?&quot;">‚Äã</a></h2><p>If you are on the client side (e.g., inside a browser or client-only React app), feel free to use:</p><ul><li><code>@zl-asica/react</code>: General components, utilities, and hooks</li><li><code>@zl-asica/react/hooks</code>: Standalone composable hooks</li></ul><p>Example:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ‚úÖ Works in the browser</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useToggle } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@zl-asica/react&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useToggle } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@zl-asica/react/hooks&#39;</span></span></code></pre></div><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">‚Äã</a></h2><table tabindex="0"><thead><tr><th>Environment</th><th>Use Package</th><th>Notes</th></tr></thead><tbody><tr><td>SSR (e.g., Next.js)</td><td><code>@zl-asica/react/utils</code></td><td>SSR-safe utility functions only</td></tr><tr><td>Client (Browser)</td><td><code>@zl-asica/react</code>, <code>@zl-asica/react/hooks</code></td><td>Full support for components, hooks, and utilities</td></tr></tbody></table><blockquote><p>üìù If you&#39;re unsure whether your code runs on the server or client, you&#39;re probably on the client ‚Äî and you&#39;re good to go with the default imports.</p></blockquote>`,24)]))}const g=t(o,[["render",r]]);export{u as __pageData,g as default};
