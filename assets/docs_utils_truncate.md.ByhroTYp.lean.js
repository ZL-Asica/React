import{_ as s,c as t,a2 as i,o as e}from"./chunks/framework.BQmytedh.js";const k=JSON.parse('{"title":"truncate()","description":"","frontmatter":{},"headers":[],"relativePath":"docs/utils/truncate.md","filePath":"docs/utils/truncate.md"}'),n={name:"docs/utils/truncate.md"};function r(h,a,l,p,d,o){return e(),t("div",null,a[0]||(a[0]=[i(`<h1 id="truncate" tabindex="-1">truncate() <a class="header-anchor" href="#truncate" aria-label="Permalink to &quot;truncate()&quot;">​</a></h1><blockquote><p><strong>truncate</strong>(<code>input</code>, <code>maxLength</code>): <code>string</code></p></blockquote><p>Truncates a string to a specified length, appending &#39;...&#39; if truncated.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>input</strong>: <code>string</code></p><p>The string to truncate.</p><p>• <strong>maxLength</strong>: <code>number</code></p><p>The maximum length of the truncated string.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>string</code></p><p>The truncated string. If <code>maxLength</code> is 0 or negative, returns an empty string.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">truncate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This is a long string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;This is a...&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">truncate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Short&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;Short&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">truncate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;&#39;</span></span></code></pre></div><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/ZL-Asica/React/blob/dc97ccdf41f190d4fb621413aaabbe1f97a8b175/src/utils/stringUtils.ts#L49" target="_blank" rel="noreferrer">utils/stringUtils.ts:49</a></p>`,15)]))}const g=s(n,[["render",r]]);export{k as __pageData,g as default};
