import{_ as s,c as i,o as e,ag as t}from"./chunks/framework.BmLMQRXF.js";const k=JSON.parse('{"title":"assignUUID()","description":"","frontmatter":{},"headers":[],"relativePath":"docs/utils/assignUUID.md","filePath":"docs/utils/assignUUID.md"}'),n={name:"docs/utils/assignUUID.md"};function l(r,a,h,p,d,o){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="assignuuid" tabindex="-1">assignUUID() <a class="header-anchor" href="#assignuuid" aria-label="Permalink to &quot;assignUUID()&quot;">​</a></h1><p>Implementation of assignUUID.</p><h2 id="call-signature" tabindex="-1">Call Signature <a class="header-anchor" href="#call-signature" aria-label="Permalink to &quot;Call Signature&quot;">​</a></h2><blockquote><p><strong>assignUUID</strong>&lt;<code>T</code>&gt;(<code>array</code>): <code>T</code> &amp; <code>object</code>[]</p></blockquote><p>Defined in: <a href="https://github.com/ZL-Asica/React/blob/8d3cb0dac8adfb5efa1cab2247ce721be08ac793/src/utils/arrayUtils.ts#L129" target="_blank" rel="noreferrer">src/utils/arrayUtils.ts:129</a></p><p>Assigns a UUID to each element in the array.</p><ul><li>If an object already has a string <code>id</code> property, that <code>id</code> is preserved.</li><li>If an object lacks an <code>id</code>, the object is spread and a new <code>id</code> is added.</li><li>For primitive values, each element is wrapped into <code>{ id: string; value: T }</code>.</li></ul><p><strong>Note:</strong> When falling back (Next.js server side) to the Math.random–based UUID generator, the IDs are <strong>not</strong> cryptographically secure. This utility is intended for small arrays, loop indexes, UI‑keys, or other non‑critical identifiers. Avoid using it for large volumes of data or any security‑sensitive contexts.</p><h3 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><h4 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h4><p><code>T</code> <em>extends</em> <code>object</code></p><p>The type of the array elements.</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><h4 id="array" tabindex="-1">array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;array&quot;">​</a></h4><p><code>T</code>[]</p><p>The input array of items to which UUIDs will be assigned.</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>T</code> &amp; <code>object</code>[]</p><p>An array of the same length where each element is either:</p><ul><li><code>T &amp; { id: string }</code> (if <code>T</code> is an object),</li><li>or <code>{ id: string; value: T }</code> (if <code>T</code> is a primitive).</li></ul><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Objects with and without existing IDs:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> withIds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assignUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(objs);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// → [ { id: &#39;abc&#39;, name: &#39;foo&#39; }, { id: &#39;550e8400-e29b-41d4-a716-446655440000&#39;, name: &#39;bar&#39; } ]</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Array of numbers:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wrappedNums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assignUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nums);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// → [ { id: &#39;550e8400-e29b-41d4-a716-446655440001&#39;, value: 42 },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     { id: &#39;550e8400-e29b-41d4-a716-446655440002&#39;, value: 7 } ]</span></span></code></pre></div><h2 id="call-signature-1" tabindex="-1">Call Signature <a class="header-anchor" href="#call-signature-1" aria-label="Permalink to &quot;Call Signature&quot;">​</a></h2><blockquote><p><strong>assignUUID</strong>&lt;<code>T</code>&gt;(<code>array</code>): <code>object</code>[]</p></blockquote><p>Defined in: <a href="https://github.com/ZL-Asica/React/blob/8d3cb0dac8adfb5efa1cab2247ce721be08ac793/src/utils/arrayUtils.ts#L132" target="_blank" rel="noreferrer">src/utils/arrayUtils.ts:132</a></p><p>Assigns a UUID to each element in the array.</p><ul><li>If an object already has a string <code>id</code> property, that <code>id</code> is preserved.</li><li>If an object lacks an <code>id</code>, the object is spread and a new <code>id</code> is added.</li><li>For primitive values, each element is wrapped into <code>{ id: string; value: T }</code>.</li></ul><p><strong>Note:</strong> When falling back (Next.js server side) to the Math.random–based UUID generator, the IDs are <strong>not</strong> cryptographically secure. This utility is intended for small arrays, loop indexes, UI‑keys, or other non‑critical identifiers. Avoid using it for large volumes of data or any security‑sensitive contexts.</p><h3 id="type-parameters-1" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h3><h4 id="t-1" tabindex="-1">T <a class="header-anchor" href="#t-1" aria-label="Permalink to &quot;T&quot;">​</a></h4><p><code>T</code></p><p>The type of the array elements.</p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><h4 id="array-1" tabindex="-1">array <a class="header-anchor" href="#array-1" aria-label="Permalink to &quot;array&quot;">​</a></h4><p><code>T</code>[]</p><p>The input array of items to which UUIDs will be assigned.</p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>object</code>[]</p><p>An array of the same length where each element is either:</p><ul><li><code>T &amp; { id: string }</code> (if <code>T</code> is an object),</li><li>or <code>{ id: string; value: T }</code> (if <code>T</code> is a primitive).</li></ul><h3 id="examples-1" tabindex="-1">Examples <a class="header-anchor" href="#examples-1" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Objects with and without existing IDs:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> withIds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assignUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(objs);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// → [ { id: &#39;abc&#39;, name: &#39;foo&#39; }, { id: &#39;550e8400-e29b-41d4-a716-446655440000&#39;, name: &#39;bar&#39; } ]</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Array of numbers:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wrappedNums</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> assignUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nums);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// → [ { id: &#39;550e8400-e29b-41d4-a716-446655440001&#39;, value: 42 },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     { id: &#39;550e8400-e29b-41d4-a716-446655440002&#39;, value: 7 } ]</span></span></code></pre></div>`,44)]))}const g=s(n,[["render",l]]);export{k as __pageData,g as default};
