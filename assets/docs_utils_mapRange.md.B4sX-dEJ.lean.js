import{_ as e,c as i,a2 as t,o as s}from"./chunks/framework.BQmytedh.js";const c=JSON.parse('{"title":"mapRange()","description":"","frontmatter":{},"headers":[],"relativePath":"docs/utils/mapRange.md","filePath":"docs/utils/mapRange.md"}'),n={name:"docs/utils/mapRange.md"};function r(o,a,h,l,p,d){return s(),i("div",null,a[0]||(a[0]=[t('<h1 id="maprange" tabindex="-1">mapRange() <a class="header-anchor" href="#maprange" aria-label="Permalink to &quot;mapRange()&quot;">​</a></h1><blockquote><p><strong>mapRange</strong>(<code>value</code>, <code>inMin</code>, <code>inMax</code>, <code>outMin</code>, <code>outMax</code>): <code>number</code></p></blockquote><p>Maps a number from one range to another.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="value" tabindex="-1">value <a class="header-anchor" href="#value" aria-label="Permalink to &quot;value&quot;">​</a></h3><p><code>number</code></p><p>The number to map.</p><h3 id="inmin" tabindex="-1">inMin <a class="header-anchor" href="#inmin" aria-label="Permalink to &quot;inMin&quot;">​</a></h3><p><code>number</code></p><p>The minimum value of the input range.</p><h3 id="inmax" tabindex="-1">inMax <a class="header-anchor" href="#inmax" aria-label="Permalink to &quot;inMax&quot;">​</a></h3><p><code>number</code></p><p>The maximum value of the input range.</p><h3 id="outmin" tabindex="-1">outMin <a class="header-anchor" href="#outmin" aria-label="Permalink to &quot;outMin&quot;">​</a></h3><p><code>number</code></p><p>The minimum value of the output range.</p><h3 id="outmax" tabindex="-1">outMax <a class="header-anchor" href="#outmax" aria-label="Permalink to &quot;outMax&quot;">​</a></h3><p><code>number</code></p><p>The maximum value of the output range.</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>number</code></p><p>The mapped value in the new range. Returns <code>NaN</code> if inputs are invalid or input range is zero.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mapped</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 50</span></span></code></pre></div><h2 id="defined-in" tabindex="-1">Defined in <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined in&quot;">​</a></h2><p><a href="https://github.com/ZL-Asica/React/blob/914fcfbc2953842c86eabcb96537d63b3b4bfeae/src/utils/mathUtils.ts#L98" target="_blank" rel="noreferrer">src/utils/mathUtils.ts:98</a></p>',26)]))}const m=e(n,[["render",r]]);export{c as __pageData,m as default};
